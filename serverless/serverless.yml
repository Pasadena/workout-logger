# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: workout-buddy
# app and org for use with dashboard.serverless.com
app: workout-buddy-app
org: simopekkakoskinen

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 4000
  dynamodb:
    inMemory: true
    migrate: true
    onStart: true
    stages:
      - dev

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  # you can overwrite defaults here
  #  stage: dev
  region: eu-north-1

  environment:
    WORKOUTS_TABLE: Workouts
    EXERCISE_TYPES_TABLE: ExerciseType
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamoDb:Scan
        - dynamoDb:GetItem
        - dynamoDB:PutItem
      Resource: "*"

functions:
  workouts:
    handler: api/workouts.list
    #    The following are a few example events you can configure
    #    NOTE: Please make sure to change your handler code to work with those events
    #    Check the event documentation for details
    events:
      - httpApi:
          path: /workouts
          method: GET
  workout:
    handler: api/workouts.item
    events:
      - httpApi:
          path: /workouts/{id}
          method: GET
  createWorkout:
    handler: api/workouts.create
    events:
      - httpApi:
          path: /workouts
          method: POST
  updateWorkout:
    handler: api/workouts.update
    events:
      - httpApi:
          path: /workouts/{id}
          method: PUT
  deleteWorkout:
    handler: api/workouts.delete
    events:
      - httpApi:
          path: /workouts/{id}
          method: DELETE
# you can add CloudFormation resource templates here
resources:
  Resources:
    workoutsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Workouts
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    exeerciseTypeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ExerciseType
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
